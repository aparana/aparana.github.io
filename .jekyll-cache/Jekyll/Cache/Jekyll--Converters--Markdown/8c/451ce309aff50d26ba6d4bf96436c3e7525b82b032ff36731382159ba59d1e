I"Ä‚<p><strong>Note:</strong> While reading a book whenever I come across something interesting, I highlight it on my Kindle. Later I turn those highlights into a blogpost. It is not a complete summary of the book. These are my notes which I intend to go back to later. Let‚Äôs start!</p>

<ul>
  <li>
    <p>Listening is the first and most basic skill of managing people. Listening is a precursor to empathy, which is one of the core skills of a quality manager</p>
  </li>
  <li>
    <p>So, when your mentee is speaking to you, pay attention to your own behavior. Are you spending all your time thinking about what you want to say next? Are you thinking about your own work? Are you doing anything other than listening to the words coming out of his mouth? If so, you‚Äôre not listening well</p>
  </li>
  <li>Building Trust and Rapport: One strategy is to ask a series of questions that are intended to help you get to know the aspects of the person that impact your ability to manage him well. These questions might include: ‚Ä¢ How do you like to be praised, in public or in private? Some people really hate to be praised in public. You want to know this. ‚Ä¢ What is your preferred method of communication for serious feedback? Do you prefer to get such feedback in writing so you have time to digest it, or are you comfortable with less formal verbal feedback? ‚Ä¢ Why did you decide to work here? What are you excited about? ‚Ä¢ How do I know when you‚Äôre in a bad mood or annoyed? Are there things that always put you in a bad mood that I should be aware of? Maybe a direct report fasts for religious reasons, which sometimes makes him cranky. Maybe he always gets stressed out while on-call. Maybe he hates reviews season. ‚Ä¢ Are there any manager behaviors that you know you hate? If you asked me this question, my answer would be: skipping or rescheduling 1-1s, neglecting to give me feedback, and avoiding difficult conversations. ‚Ä¢ Do you have any clear career goals that I should know about so I can help you achieve them? ‚Ä¢ Any surprises since you‚Äôve joined, good or bad, that I should know about? Things like: Where are my stock options? You promised me a relocation bonus and I haven‚Äôt gotten it yet. Why are we using SVN and not Git? I didn‚Äôt expect to be so productive already!
¬†</li>
  <li>
    <p>Another approach that many experienced managers use is to help their new reports create a 30/60/90-day plan. This can include basic goals, like getting up to speed on the code, committing a bug fix, or performing a release, and is especially valuable for new hires and people transferring from other areas of the company</p>
  </li>
  <li>
    <p>Trust and control are the main issues around micromanagement. If you‚Äôre micromanaging someone, chances are you‚Äôre doing it because you don‚Äôt trust that a task will be done right, or you want to very tightly control the outcome so that it meets your exact standards</p>
  </li>
  <li>
    <p>Autonomy , the ability to have control over some part of your work, is an important element of motivation. This is why micromanagers find it so difficult to retain great teams</p>
  </li>
  <li>
    <p>Assessing Your Own Experience ‚Ä¢ Have you set up regular 1-1s with your direct reports? ‚Ä¢ When was the last time you talked to your reports about their career development? If it was more than three months ago, can you make sure to put this in your next 1-1s? ‚Ä¢ Have you given feedback to your reports in the last week? When was the last time you handed out kudos in front of the team? ‚Ä¢ When was the last time someone behaved in a way that needed correction? How long did it take you to give corrective feedback? Did you give the feedback in private, or did you do it in public? ‚Ä¢ Have you ever been given a performance review that felt like a waste of time? What was it missing that could have made it more valuable? ‚Ä¢ What was the most useful piece of performance feedback you ever got? How was it delivered to you? ‚Ä¢ Do you know how the process of promoting people works in your company? If not, can you ask someone to walk you through it?</p>
  </li>
  <li>
    <p>Don‚Äôt rely exclusively on consensus or voting. Consensus can appear morally authoritative, but that assumes that everyone involved in the voting process is impartial, has an equal stake in the various outcomes, and has equal knowledge of the context. These conditions are rarely met on teams where each person has different levels of expertise and different roles</p>
  </li>
  <li>
    <p>Do set up clear processes to depersonalize decisions. When you want to allow for group decision making, the group needs to have a clear set of standards that they use to evaluate decisions. Start with a shared understanding of the goals, risks, and the questions to answer before making a decision. When you assign the ownership for making a decision to someone on the team, make it clear which members of the team should be consulted for feedback and who needs to be informed of the decision or plan</p>
  </li>
  <li>
    <p>Don‚Äôt turn a blind eye to simmering issues. Another way that conflict avoidance manifests is an inability to address problems until they‚Äôve gone on for way too long. As a manager, if you‚Äôre giving negative feedback in the course of a performance review, it shouldn‚Äôt be a major surprise to your employee. There may be nuances that you didn‚Äôt think through until writing the review, but if there are major problems with someone‚Äôs work, that person should know about them as soon as you notice them. If you don‚Äôt notice these problems yourself but learn about them during the review process via feedback from several peers, that‚Äôs not a good sign. It‚Äôs probably an indication that you are not paying attention, and not making space in your 1-1s for your team to discuss problems they‚Äôre having with their colleagues</p>
  </li>
  <li>Do address issues without courting drama. There‚Äôs a difference between addressing conflict and cultivating dysfunction. You want to allow space for people to express frustration, but mind the difference between letting off steam and a real interpersonal issue. Use your judgment as to what should be addressed and what should be dropped. The key questions to ask are: Is this an ongoing problem? Is it something you‚Äôve personally noticed? Is this something many people on the team are struggling with? Is there a power dynamic or potential bias at play? The goal is to identify problems that are causing the team to work less effectively together and resolve them, not to become the team‚Äôs therapist
¬†</li>
  <li>
    <p>Don‚Äôt take it out on other teams. Ironically, conflict-avoidant managers often seek conflict when it comes to other teams. They identify strongly with their own team and will aggressively react to what they perceive as threats from outsiders. When something goes wrong, like an incident that spans across teams, the manager turns into a bully and demands justice for his team, or blames the problems on the other team. Sometimes, this behavior is an outlet for the manager‚Äôs suppressed feelings about his own team</p>
  </li>
  <li>
    <p>Do remember to be kind. It‚Äôs natural and perfectly human to want to be liked by other people. Many of us believe that the way to be liked is to be seen as nice‚Äîthat niceness is itself the goal. Your goal as a manager, however, should not be to be nice, it should be to be kind. ‚ÄúNice‚Äù is the language of polite society, where you‚Äôre trying to get along with strangers or acquaintances. Nice is saying ‚Äúplease‚Äù and ‚Äúthank you‚Äù and holding doors for people struggling with bags or strollers. Nice is saying ‚ÄúI‚Äôm fine‚Äù when asked how you are, instead of ‚ÄúI‚Äôm in a really crappy mood and I wish you would leave me alone.‚Äù Nice is a good thing in casual conversation. But as a manager, you will have relationships that go deeper, and it‚Äôs more important to be kind. It‚Äôs kind to tell someone who isn‚Äôt ready for promotion that she isn‚Äôt ready, and back that up with the work she needs to do to get there. It‚Äôs unkind to lead that person on, saying</p>
  </li>
  <li>
    <p>‚ÄúMaybe you could get promoted,‚Äù and then watch her fail. It‚Äôs kind to tell someone that his behavior in meetings is disrupting the group. It‚Äôs awkward, and uncomfortable, but it‚Äôs also part of your job as his manager to have these difficult conversations. ‚Ä¢ Don‚Äôt be afraid. Conflict avoidance often arises from fear. We‚Äôre scared of the responsibility of making the decision. We‚Äôre afraid of seeming too demanding. We‚Äôre afraid people will quit if we give them uncomfortable feedback. We‚Äôre afraid people won‚Äôt like us, or that we‚Äôll fail when we take this risk. Some fear is natural, and being sensitive to the outcomes of conflict is a wise habit</p>
  </li>
  <li>
    <p>Do get curious. Thinking about your actions is the best way to combat fear of conflict. Am I pushing this decision to the team because they really are the best people to decide, or am I just afraid that if I make an unpopular but necessary decision people will be mad at me? Am I avoiding working through this issue with my peer because she‚Äôs truly difficult to work with, or am I just hoping that the issue will resolve itself because I don‚Äôt want to have to discuss it and possibly be wrong? Am I holding back on giving my employee this feedback because he really was having a bad day and it‚Äôs just a one-off, or am I holding back because I‚Äôm afraid he won‚Äôt like me as a manager if I tell him? Be thoughtful about your behavior, and it‚Äôs unlikely that you‚Äôll seek out unnecessary conflict</p>
  </li>
  <li>
    <p>You have 10 productive engineering weeks per engineer per quarter There are 52 weeks in a year, or about 13 per quarter. However, realistically your team will lose a lot of that time. Vacations, meetings, review season, production outages, onboarding new employees‚Äîall of these things take away from focus. Don‚Äôt expect to get more than 10 weeks‚Äô worth of focused effort on the main projects per team member per quarter</p>
  </li>
  <li>
    <p>Budget 20% of time for generic sustaining engineering work across the board</p>
  </li>
  <li>
    <p>As you approach deadlines, it is your job to say no</p>
  </li>
  <li>
    <p>Use the doubling rule for quick estimates, but push for planning time to estimate longer tasks The popular doubling rule of software estimation is, ‚ÄúWhenever asked for an estimate, take your guess and double it.‚Äù This rule is appropriate and good to use when you‚Äôre asked for an off-the-cuff guess. However, when you‚Äôre talking about projects that you think will take longer than a couple of weeks, go ahead and double the estimate, but make it clear that you‚Äôll need some planning time before you‚Äôre sure about the timescale. Sometimes the longer tasks will take far more than twice your estimate, and it‚Äôs worth spending some time planning more carefully before you commit your team to a big, unknown project</p>
  </li>
  <li>
    <p>Be selective about what you bring to the team to estimate</p>
  </li>
  <li>
    <p>Assessing Your Own Experience ‚Ä¢ What are your new responsibilities now that you‚Äôre the manager of a team? What tasks have you stopped doing or handed off to someone else in order to make time for these new responsibilities? ‚Ä¢ How well do you feel you know the day-to-day challenges of writing, deploying, and supporting code on your team? ‚Ä¢ How often does your team mark work as completed? ‚Ä¢ When was the last time you wrote a feature, debugged a problem, or paired with a member of your team on some code he or she was struggling with? ‚Ä¢ Are there one or two team members who cause the bulk of negativity on the team? What is your plan for getting rid of the problem moving forward? ‚Ä¢ Do your team members seem engaged with one another? Do they smile in meetings? Make jokes in chat? Get coffee or lunch together? When was the last time you all sat down together without talking about work? ‚Ä¢ How does your team make decisions? Do you have a process for assigning decision-making responsibility? What decisions do you hold yourself responsible for making? ‚Ä¢ When was the last time you reviewed a completed project to see if it had achieved its goals? ‚Ä¢ How well does your team understand why they are working on the projects they are working on? ‚Ä¢ When was the last time you cut scope on a project? What did you use to determine which pieces to cut?</p>
  </li>
  <li>
    <p>Saying no to your boss rarely looks like a simple ‚Äúno‚Äù when you‚Äôre a manager. Instead, it looks like the ‚Äúyes, and‚Äù technique of improvisational comedy. ‚ÄúYes, we can do that project, and all we will need to do is delay the start of this other project that is currently on the roadmap.‚Äù Responding with positivity while still articulating the boundaries of reality will get you into the major leagues of senior leadership</p>
  </li>
  <li>
    <p>When you start repeating yourself, you have the basis for a reasonable policy. That policy consists of the hard requirements that must be met in order to say yes, and some guidelines for thinking about the decision. Making a policy helps your team know in advance the cost of getting to ‚Äúyes.‚Äù</p>
  </li>
  <li>
    <p>These health signals‚Äîfrequency of code releases, frequency of code check-ins, and infrequency of incidents‚Äîare the key indicators of a team that knows what to do, has the tools to do it, and has the time to do it every day</p>
  </li>
  <li>The beauty of pushing for more frequent releases is that it often uncovers a host of interesting challenges. There‚Äôs no one true way to increase release frequency because frequency problems will be somewhat unique from team to team. You‚Äôll almost certainly need to solve some automation elements. Developer tooling to enable feature toggles that make sense for your code bases is another frequent challenge. Thinking about architecting code to move forward without breaking backward compatibility, rolling upgrades of systems, and implementing small changes instead of giant patches‚Äîall of these things may need addressing. You‚Äôre responsible for leading the effort here, even if you don‚Äôt do the work. Push for time away from the product roadmap to support increasing engineering productivity, and set goals for the team that inspire them to move faster
¬†¬†</li>
  <li>
    <p>Durable teams are built on a shared purpose that comes from the company itself, and they align themselves with the company‚Äôs values</p>
  </li>
  <li>
    <p>They have a clear understanding of the company‚Äôs mission, and they see how their team fits into this mission. They can see that the mission requires many different types of teams, but all of the teams share a set of values. By creating a strong and enduring alignment between the team, its individuals, and the overall company, this purpose-based binding makes teams: ‚Ä¢ Resilient to loss of individuals. While the clique is fragile, especially to the loss of the leader, the purpose-driven team tends to be very resilient to the loss of individuals and leadership. Because they‚Äôre loyal to the mission of the larger organization, they can see a path forward even through loss. ‚Ä¢ Driven to find better ways to achieve their purpose. Purpose-driven teams are more open to new ideas and value changes that can help them serve their purpose better. They care less about the source of an idea than its merit in achieving their goals. The members of these teams are interested in learning from others outside their function, and they actively seek out chances to collaborate more broadly to create the best results. ‚Ä¢ First-team focused. Leaders who are strong team players understand that the people who report to them are not their first team. Instead, their first team is their peers across the company. This first-team focus helps them make decisions that consider the needs of the company as a whole before focusing on the needs of their team. ‚Ä¢ Open to changes that serve their purpose. The collaborative leader understands that changes will happen to serve the wider purpose. Teams will change structure and people will need to move to where the business needs are. With that knowledge, these leaders create teams that are more flexible and understanding of frequent change in service of the larger vision. Getting clarity about the purpose of your team and your company can take time. In startups especially, there is often some confusion about the current goals and even sometimes the underlying mission. In the case where the goals are fuzzy and the mission is unclear, do your best to understand the company culture and think about how you can set your teams up to work well within that culture. By collaborating across teams and across business functions, your teams will come to understand the bigger picture and appreciate their mission as part of that picture</p>
  </li>
  <li>One thing that managers have to keep in mind is that part of their job is to ferret out problems proactively. There exists an idea that if you make yourself accessible, hold office hours where anyone can meet with you, and tell the team that you are always available, people will naturally bring their problems to your office. There‚Äôs no need to seek them out, because your team trusts you enough to come to you when things are going wrong. Except this basically never happens. The open-door policy is nice in theory, but it takes an extremely brave engineer to willingly take the risk of going to her boss (or especially her boss‚Äôs boss, etc.) to tell him about problems. That even assumes that the engineer knows what the problems actually are well enough to explain them! Even on teams you build yourself, where there‚Äôs a huge level of trust and respect, some problems will just never get escalated to you. Some of these problems will cause people to leave, projects to get delayed, failures to explode. You turn your back, and the next minute a team that seemed fine has crumbled. The risk of relying on an open-door policy increases the further away you get from a team. This culminates in the most classic, clueless executive move of relying on office hours instead of meeting one-on-one and with teams directly, and wondering why the wonderful management staff isn‚Äôt managing to retain great talent or get things done. Some people are great at managing up and hiding problems in their organizations, and you won‚Äôt ever see these issues if you never take the time to look
¬†¬†</li>
  <li>
    <p>Some suggested prompts to provide the person you are holding the skip-level 1-1 with include: ‚Ä¢ What do you like best/worst about the project you are working on? ‚Ä¢ Who on your team has been doing really well recently? ‚Ä¢ Do you have any feedback about your manager‚Äîwhat‚Äôs going well, what isn‚Äôt? ‚Ä¢ What changes do you think we could make to the product? ‚Ä¢ Are there any opportunities you think we might be missing? ‚Ä¢ How do you think the organization is doing overall? Anything we could be doing better/more/less? ‚Ä¢ Are there any areas of the business strategy you don‚Äôt understand? ‚Ä¢ What‚Äôs keeping you from doing your best work right now? ‚Ä¢ How happy (or not) are you working at the company? ‚Ä¢ What could we do to make working at the company more fun?</p>
  </li>
  <li>
    <p>If you have a larger organization, or are impatient with the idea of adding more unstructured 1-1s to your schedule, there are other ways to get skip-level time. I used to hold skip-level lunches with whole teams, where I would buy lunch for the group and we would talk about whatever was going on. I tried to do these a couple of times a quarter for each team. This has many of the benefits of the 1-1 meeting, in terms of making you more familiar to the team members and vice versa</p>
  </li>
  <li>It doesn‚Äôt give you the focus to give career coaching to individuals, but it does help you get a sense of the group dynamics and get feedback directly from the teams
¬†¬†</li>
  <li>In the group setting, these questions can be used to draw out information: ‚Ä¢ What can I, your manager‚Äôs manager, provide for you or your team? Anything I should be helping with? ‚Ä¢ Is this team working poorly with any other teams, from your perspective? ‚Ä¢ Are there any questions about the larger organization that I can answer?
¬†</li>
  <li>
    <p>When the product organization is constantly changing goals, the manager should identify that the changes are causing problems on the team, and work with product to explain the problem and refocus on what‚Äôs important. If that fails, she should come to you to help resolve the issue</p>
  </li>
  <li>
    <p>When the tech lead is down a rabbit hole, the manager has to bring that person out and work with him to figure out how to make the design process more transparent, bringing in other senior people from other teams if necessary as mentors or collaborators to help him deconstruct the problem and make forward progress. The manager is responsible for coming to you when the roadmap is stalled because of other issues. If the team can‚Äôt do anything but fight fires, the manager should put together a plan for tackling the causes of the fires, and if necessary bring requests for hiring more people or adding more people to the team so that they can get the situation under control. When the team is dealing with too much inbound support, the manager is responsible for triaging that support burden and figuring out whether to refuse some of the requests or, again, whether the team needs more people to manage the workload</p>
  </li>
  <li>
    <p>Managers need coaching and guidance in the same way that individual contributors need coaching and guidance. Don‚Äôt forget to spend time with your managers, get to know them as people, and pay attention to their strengths and areas for development. There‚Äôs plenty to talk about in your 1-1s related to schedule and planning, but make time for feedback and coaching. These individuals will have the biggest impact on your overall organization‚Äôs success or failure, and in turn will make you look good or bad depending on how well they perform, so take an active role in their management performance</p>
  </li>
  <li>
    <p>What should you do if you find yourself managing someone in this situation? Help the person feel safer saying no and externalizing more decisions so he doesn‚Äôt take failure personally. Providing him with strong partners who can take on the task of determining the work roadmap is a good option. Sometimes people pleaser managers work well in agile frameworks because the team itself takes ownership of work planning. Create better processes for getting work scheduled that don‚Äôt rely entirely on the manager‚Äôs discretion. When it comes to promising things to the team itself, having a structure that specifies the requirements for getting promotions or accessing other opportunities can apply here as well</p>
  </li>
  <li>
    <p>Management tends to be a very culture-specific</p>
  </li>
  <li>
    <p>Management tends to be a very culture-specific task in a company. I can give you best practices all day, but if you either work as a manager or hire a manager for a company that‚Äôs not a good culture fit, you‚Äôll have problems. There is a reason that many young companies want to seed their management teams with people who‚Äôve been there from the early days and understand the company‚Äôs DNA. They get the culture, they understand deeply what is important, and they have the internal networks already built to get things done</p>
  </li>
  <li>Don‚Äôt compromise on culture fit, especially when hiring managers
¬†</li>
  <li>
    <p>How do you inspire experienced managers? The difference between an experienced manager and a new manager is that the experienced person should be capable of managing independently. This means that a lot of the coaching you provide will be less about the nuts and bolts of management and more about how he can have a larger impact on strategy and direction setting for his area. Don‚Äôt forget to think about tasks that you can delegate to him, and he should be an important advisor when it comes to setting organizational direction</p>
  </li>
  <li>While they may not need as much training as new managers, experienced managers often need help expanding their network both within the company and externally, so look for programs that can help them meet new peers
¬†¬†</li>
  <li>
    <p>1-1s are an essential tool for a manager to determine the health of her team and gather and impart valuable information. Any manager you hire should role-play a few 1-1s as part of the interview process. One of the best ways to do this is by asking the people who would report to the new manager to interview her by asking her to help with problems they have right now, or have had in the recent past</p>
  </li>
  <li>
    <p>A manager must also be able to debug teams. Ask the manager to describe a time when she ran a project that was behind schedule, and what she did in that scenario. Or ask her to role-play with an employee who is thinking about quitting. Ask the manager to describe how she‚Äôs coached employees who were struggling, and helped great employees grow to new levels. Ask her about her management philosophy. If she doesn‚Äôt have one at all, that might be a red flag</p>
  </li>
  <li>
    <p>Depending on the seniority, you might have a candidate come in and give a presentation to a group of people. The point of this is not specifically to judge the contents of the presentation, but to see how she is at commanding a room, answering questions posed by a group, structuring her thoughts, and getting up in front of an audience</p>
  </li>
  <li>
    <p>Culture fit is so important in managers because they shape their teams to their culture, and they hire new people based on their cultural ideas. If you hire a manager who doesn‚Äôt fit in culturally with the team she‚Äôs managing, one of two things is likely to happen: the manager will fail and you‚Äôll have to fire her, or most of the team will quit and then you may still have to fire her. Sometimes changing the culture of an area is inevitable, and hiring in a new manager will hasten that change. You can use management changes to your advantage in this way. In fact, you see this frequently at growing startups, where they hire in more seasoned managers and executives to round out the lack of experience of the rest of the team. Sometimes this works incredibly well, and sometimes it‚Äôs a massive failure. No matter what, you will usually see attrition happening around the hire of these bearers of new and different culture, so proceed here with caution</p>
  </li>
  <li>
    <p>Do thorough reference checks for anyone you‚Äôre planning to bring on board, even if you‚Äôve worked with that person before. Ask the references to describe the ways that the person succeeds as well as the ways she fails. Ask them if they would work with or for this person again</p>
  </li>
  <li>
    <p>I believe that the best engineering managers are often great debuggers</p>
  </li>
  <li>
    <p>A great debugger is relentless in his pursuit of the ‚Äúwhy‚Äù for a bug. This is simple when we‚Äôre looking for errors in application logic, but we all know that bugs can go many layers deep, particularly in complex systems that involve many separate parts operating over time-delayed networks. A sign of a poor debugger is a person who, when he adds a log statement to a piece of concurrent code to attempt to find an error and sees that the error can‚Äôt be reproduced, assumes that he‚Äôs fixed the problem. It‚Äôs a lazy habit, but a common one. Sometimes there are problems that seem impossible to determine, and many people don‚Äôt have the patience to dig through layers of code (theirs and others‚Äô), logfiles, system settings, and whatever else is needed to get to the bottom of something that happened only once</p>
  </li>
  <li>
    <p>What does this have to do with management? Managing teams is a series of complex black boxes interacting with other complex black boxes. These black boxes have inputs and outputs that can be observed, but when the outputs aren‚Äôt as expected, figuring out why requires trying to open them up and see what‚Äôs going on inside. And, just as sometimes you don‚Äôt have the source code, or the source code is in a language you don‚Äôt understand, or the logfiles aren‚Äôt readable, the black boxes of teams can resist yielding their inner workings</p>
  </li>
  <li>To properly debug a system, you need a reasonable hypothesis that explains how the system got into the failed state, preferably one that you can reproduce, so that you can fix the bug. To debug a team, you also want to look for a hypothesis around why the team is having problems. Do this in as minimally invasive a way as possible, to prevent your meddling from obscuring the problems. As an added challenge, team problems are not generally single failures but are more like performance issues. The system is running, but it seems to slow down from time to time; the machines are OK, except occasionally they crash; people seem happy, but attrition is too high
¬†</li>
  <li>
    <p>Debugging a team deserves the same rigor you would apply to debugging a serious systems issue. When I debug a systems issue, the first thing I look at is log files and any other record of system state from the time of the incident. When you‚Äôre looking at a team that isn‚Äôt producing work fast enough, look at the records. Look at the team chats and emails, look at the tickets, look at the repository code reviews and check-ins. What do you see? Are production incidents happening that are taking up lots of time? Are a bunch of people sick? Are they bickering over coding style in their code review comments? Are the tickets that are being written vague, too big, too small? Does the team seem upbeat in their communication style, sharing fun things as well as important work in chat, or are they purely business? Look at their calendars. Is the team spending many hours a week in meetings? Is their manager not doing 1-1s? None of these things are necessarily smoking guns, but they may point to an area to address</p>
  </li>
  <li>
    <p>Now is the time to start doing some potentially destructive investigations. Sit in their meetings. Are they boring to you? Is the team bored? Who is speaking most of the time? Are there regular meetings with the whole team where the vast majority of the time is spent listening to the manager or product lead talk? Boring meetings are a sign. They may be a sign of inefficient planning on the part of the organizers. There may be too many meetings happening for the information covered. They may indicate that the team members don‚Äôt feel they can actually help set the direction of the team, or choose the work that will happen. They often signal a lack of healthy conflict on a team. Good meetings have a heavy discussion element, where opinions and ideas are drawn out of the team. If the meetings are overscripted, so that no real conversation can take place, it stifles that creative discussion. If people are afraid to disagree or bring up issues for fear of dealing with conflict, or if managers always shut down conflict without letting disagreements air, this is a sign of an unhealthy team culture. Be aware, though, that while teams can be black boxes, they share a characteristic of another famous box‚Äîthe one containing Schr√∂dinger‚Äôs cat. The point of Schr√∂dinger‚Äôs experiment was to show that the act of observing changes the outcome, or rather, causes an outcome to happen. Likewise, you can‚Äôt go into a team and not change the behavior of that team by being around them, sitting in their meetings, and watching their standups. Your presence changes the team‚Äôs behavior and may hide the problem you‚Äôre trying to find, in the same way that a log statement can cause a concurrency issue to be magically erased, at least for some time</p>
  </li>
  <li>
    <p>Ask the team what their goals are. Can they tell you? Do they understand why those are the goals? If they don‚Äôt understand the goals of their work, their leaders (manager, tech lead, product manager) aren‚Äôt doing a good job engaging the team in the purpose of the work. In almost every model of motivation, people need to feel an understanding and connection with the purpose of their work. Who are they building these systems for; what is the potential impact on the customer, the business, the team? Did they have any part in deciding these goals, and the projects that they‚Äôre doing to achieve them? If not, why not? When you see a team spending all of their time on engineering-sponsored projects and neglecting product/business projects, it‚Äôs likely that the team doesn‚Äôt appreciate or understand the value of the product/business projects they‚Äôre supposed to be working on, and therefore they lack the motivation to tackle them. CHECK THE TEAM DYNAMICS Finally, you might take a look at the actual team dynamics. Do people like each other? Are they friendly? Do they collaborate on projects, or is every person working on something independently? Is there banter in the chat room, in emails? Do they have a good working relationship with other adjacent departments, and with their product managers? These are little things, but even very professional groups tend to have a degree of personal connection between the members. A bunch of people who never talk to each other and are always working on independent projects are not really working as a team. There would be nothing wrong with that if the team were performing well, but given that they‚Äôre not, this may be contributing to your problem</p>
  </li>
  <li>
    <p>You measure the manager on the output of his team, after all, and it is his responsibility to fix it if things are not going well. This is true, but just as I sometimes jump in and help debug complex system outages even though I rarely write code, it‚Äôs OK to jump in and help debug team issues as you see them, particularly when the manager in question is struggling</p>
  </li>
  <li>
    <p>The pursuit of why when it comes to organizational problems is the thing that gives you patterns to match on, and lessons to lead with. We get better at debugging by doing it often, and learn which areas tend to break first and which indicators provide the most value for understanding issues. We become better leaders by pushing ourselves and our management teams to really get to the bottom of organizational issues, searching for why so that we can more quickly resolve such issues in the future. Without the drive to understand why, we rely on charm and luck to see us through our management careers and to make our hiring and firing decisions. As a result, we have a huge blindspot when it comes to truly learning from our mistakes</p>
  </li>
  <li>Estimates are often useful even if they aren‚Äôt perfectly accurate because they help escalate complexity to the rest of the team. Not every project necessarily has requirements that change frequently, and it‚Äôs possible to do up-front work to drastically reduce the unknowns that make software estimation difficult
¬†</li>
  <li>
    <p>There are few strategies I‚Äôve learned about building a roadmap: ‚Ä¢ Be realistic about the likelihood of changing plans given the size and stage of the company you work for. If your startup has a history of changing the year‚Äôs plans every summer to account for the business results from the first half of the year, be prepared for a change in the summer, and try not to promise things to your team that would require continuity beyond that point. ‚Ä¢ Think about how to break down big projects into a series of smaller deliverables so that you can achieve some of the results, even if you don‚Äôt necessarily complete the grand vision. Breaking down the technical work will require you to work closely with the product or business managers to figure out how the details should be prioritized. All of you should be aware by now that things will change quickly, so everything must be repeatedly reexamined with an eye toward what‚Äôs most valuable right now. ‚Ä¢ Don‚Äôt overpromise a future of technical projects. Don‚Äôt promise your team exciting technical projects ‚Äúlater,‚Äù because the product roadmap for later hasn‚Äôt been written yet. This kind of thinking will get hopes up and then disappoint. If the project is important, get it scheduled now‚Äîor as close to now as possible. If the project is not urgently important, you can put it on the backlog, but you should be realistic that once ‚Äúlater‚Äù rolls around, there will be a long list of competing priorities from other parts of the business. If you haven‚Äôt taken the time to articulate the value of this work, it will get pushed aside in favor of projects that are more clearly valuable. ‚Ä¢ Dedicate 20% of your team‚Äôs schedule to ‚Äúsustaining engineering.‚Äù This means allowing time for refactoring, fixing outstanding bugs, improving engineering processes, doing minor cleanup, and providing ongoing support. Take this into account in every planning session. Unfortunately, 20% is not enough to do big projects, so additional planning will be needed to get major technical rewrites or other big technical improvements. But without that 20% time, there will be negative consequences with missed delivery goals and unplanned and unpleasant cleanup work. ‚Ä¢ Understand how important various engineering projects really are. Product and business projects usually have some kind of value proposition to justify them. However, the same rigor isn‚Äôt always applied when it comes to technical projects. When an engineer comes to you with an engineering project that she wants to do, think about framing the project by answering these questions: ‚Äî How big is that project? ‚Äî How important is it? ‚Äî Can you articulate the value of that project to anyone who asks? ‚Äî What would successful completion of the project mean for the team?</p>
  </li>
  <li>
    <p>Be prepared to push both up and down to maintain or change focus</p>
  </li>
  <li>
    <p>The more senior the management and leadership position you take in a company, the more the job becomes making sure that the organization moves in the direction it needs to move in, and that includes changing direction when needed</p>
  </li>
  <li>
    <p>Finally, never underestimate how many times and how many ways something needs to be said before it sinks in. Communication in a large organization is hard. In my experience, most people need to hear something at least three times before it really sinks in</p>
  </li>
  <li>
    <p>As a person in senior leadership, you‚Äôll need to excel at communicating sensitive information to large groups. Here are a few dos and don‚Äôts: ‚Ä¢ Don‚Äôt blast an impersonal message to a large group. The worst way to communicate bad news is via impersonal mediums like email and chat, especially mediums with commenting abilities. Your team deserves to hear the message coming from your mouth directly, and without you to guide the message, you can expect some misunderstandings and bubbling animosity. That being said, the second-worst way to deliver this message, especially to a large group that you know won‚Äôt be happy, is with them all in a room at once</p>
  </li>
  <li>
    <p>You may think that trying to communicate bad news to everyone at once is the best way to keep it from spreading before everyone has heard it, but the result is still impersonal. It‚Äôs hard to see everyone‚Äôs reaction, and one or two deeply unhappy members can quickly rile up the whole team before the message has had the chance to sink in. ‚Ä¢ Do talk to individuals as much as possible. Instead of impersonal or groupbased communication, try your best to talk to people individually about the news. Think about the people who are going to have the strongest reaction, and try to tailor the news to them. Give them space one-on-one to react, to ask questions, to get it straight from you. And as necessary, make it clear that these are the marching orders and that you need your people to be on board with the changes, even if they don‚Äôt love them. In a case where you need to get the message out to your whole organization, talk to your managers first, give them talking points, and then let them share with their teams before bringing the whole group together. ‚Ä¢ Don‚Äôt force yourself to deliver a message you can‚Äôt stand behind. You may have a hard time delivering this news because you don‚Äôt like it yourself. Maybe you violently disagree with the policy change. Maybe you hate the fact that the team is being split up. If you absolutely can‚Äôt deliver the news in a way that won‚Äôt betray your strong disagreement, you might need to have someone else help you deliver it. Perhaps you ask another executive to step in, or maybe someone from HR. Depending on the size of your team, you can deliver the information to a trusted lieutenant and have that person help to share it. As someone in senior leadership, you have to learn how to maturely handle decisions you don‚Äôt agree with, but that doesn‚Äôt mean you have to go it alone. ‚Ä¢ Do be honest about the likely outcomes. The more you can commit to the direction specified by the news yourself, the easier this will be. If there are layoffs, acknowledge that this process is not fun but that everyone needs the company to survive. If a team is being disbanded, feel free to point out both the accomplishments of the team up to this point and the changes that make this the right path forward, and emphasize that there are many new opportunities now for learning and growth. Being forthright with people will help them trust you more and make them more likely to tolerate the unhappy news well</p>
  </li>
  <li>
    <p>Do think about how you would like to be told. One piece of news that you may have to deliver someday is the news of your leaving. In fact, you‚Äôve probably had the experience of resigning from a job already, or moving from one team to another. How did you communicate that news? Did you send a memo? Well, maybe to HR, but to the rest of the team you probably pulled people aside to tell them face-to-face if you thought they would want to know before it was public. You may have had a going-away party, written a farewell letter, or given a final lecture to the team about what you learned in your time at the company. It‚Äôs OK in some circumstances to celebrate these sad changes, so long as you can do it with grace. All of these lessons apply to delivering hard news to your team</p>
  </li>
  <li>
    <p>Don‚Äôt be afraid to repeat yourself. If you‚Äôve brought up an important issue that seems to have been forgotten, bring it up again if it‚Äôs really important. You may have to do this a few times before you get any traction. Three times is often the magic number</p>
  </li>
  <li>
    <p>As the senior-most person in an organization, you‚Äôll be watched more closely than you‚Äôve ever been watched in your life. Your presence causes people to focus all of their attention on you. They seek out your approval and try to avoid your criticism. Shifting your mindset away from ‚Äúone of the team‚Äù to ‚Äúthe person in charge,‚Äù especially if you came up through the team and grew the team yourself, is a challenge for many at this level. You‚Äôre no longer one of the team. Your first team is comprised of your peers at the leadership/executive level, and your reporting structure has now become your second team. If you shift your mindset successfully, you will probably start to detach socially a little bit from the overall organization. When there‚Äôs a happy hour, you go for a drink and then leave the team to socialize. Closing down the bar with your whole organization will tend to have bad consequences for everyone, so I strongly advise that you avoid doing that with any regularity. Socializing heavily with your team outside of working hours is a thing of the past. You need to detach for a few reasons. First, if you don‚Äôt detach, you‚Äôre likely to be accused of playing favorites. In fact, you probably will play favorites if you maintain very strong social ties with people who report up to you on the team. This hurts, but it is true. Maybe you don‚Äôt care, but personally I found that having my team believe I was playing favorites made the overall team unhappy and made my job a lot harder. Second, you need to detach because you need to learn how to lead effectively, and leading effectively requires people to take your words seriously. The downside of leading at this level is that with a throwaway comment, you can cause people to change their whole focus. This is bad, unless you‚Äôre aware of that and actually make use of it appropriately. If you try to maintain a ‚Äúbuddy‚Äù image, your reports are going to have a hard time distinguishing between their buddy thinking out loud and their boss asking them to focus on something. Detaching also means being thoughtful about where you spend your time. As the senior leader, you‚Äôll often suck all of the oxygen out of a room. Your mere presence will change the tone and structure of meetings you attend. If you aren‚Äôt careful, you‚Äôll end up pontificating and change the direction of a project because you had a great brainstorm in a one-off meeting you decided to drop into. It sucks! I know! It‚Äôs frustrating that you can no longer be one of the team whose ideas are there to be evaluated and potentially rejected‚Äîbut you are no longer that person</p>
  </li>
  <li>
    <p>There are other reasons you need to detach. You‚Äôre going to be part of hard decisions that will impact the whole business, and these decisions may cause you a great deal of stress. It won‚Äôt be appropriate to discuss these decisions with other people at the company. It‚Äôs deeply tempting to rant to those people you consider friends in your reporting team about the challenges of your position, but this is a bad idea. As their leader, you can easily undermine their confidence by sharing worries that they can‚Äôt do anything to mitigate. Transparency that may have been harmless or even possibly helpful at lower levels of management can become incredibly damaging to the stability of your team at this level</p>
  </li>
  <li>
    <p>If you want a team that feels comfortable taking risks and making mistakes, one of the core requirements is a sense of belonging and safety. This means you need to take a little time for small talk. Ask people about themselves, get to know them as humans, let them know you. Most people are scared to take risks in front of people they think will reject them if they fail. Intentionally or not, by neglecting to create even basic personal relationships with many of my team members, I made them afraid of how I would react to mistakes, questions, and failures</p>
  </li>
  <li>
    <p>Apologies don‚Äôt need to be drawn-out affairs. A short apology that takes responsibility for your role in creating a negative situation or hurting another person is all that is necessary. If you go too long, it often turns into an excuse or a distraction. The goal with apologizing is to show people that you know your behavior has an impact on others, and to role-model for them that it‚Äôs OK to make a mistake but that you should apologize when you hurt other people. You‚Äôre showing the team that apologizing doesn‚Äôt make you weaker‚Äîit makes the whole team stronger</p>
  </li>
  <li>
    <p>A core role of senior leadership is sometimes overlooked. This role, played by the senior leader of a functional area (the CTO plays it for technology, the CFO plays it for finance, etc.), sets the baseline of what excellence looks like in this function. I call it ‚ÄúTrue North.‚Äù True North represents the core principles that a person in a functional role must keep in mind as he does his job. For a product leader, True North includes thinking of the users and their needs first and foremost, measuring and experimenting as much as possible, and pushing back on projects that don‚Äôt address the stated goals of a team. For a CFO, True North includes looking at the numbers, at the costs of work and at the potential value, and making sure that you‚Äôve considered how to make those numbers work in your company‚Äôs favor, that the company isn‚Äôt accidentally spending more money than expected, that the team knows when it‚Äôs at risk for going over budget. For a technical leader, True North means making sure that you‚Äôve done your job getting things ready to go into production. It means you have honored your agreed-upon policies for review, operational oversight, and testing. It means that you won‚Äôt put something into production that you don‚Äôt believe is ready for your users to experience. It means you‚Äôre creating software and systems you‚Äôre proud of</p>
  </li>
  <li>
    <p>Technology leaders must help set the standard for True North in their organizations for different types of projects and exposures. Another way to think of this is through the lens of risk analysis. Risk analysis doesn‚Äôt mean that we don‚Äôt take risks. Some things that are generally considered ‚Äúbad‚Äù can be OK under certain circumstances. These include: ‚Ä¢ Having a single point of failure ‚Ä¢ Having known bugs and issues ‚Ä¢ Being unable to tolerate high load ‚Ä¢ Losing data ‚Ä¢ Putting out code that is undertested ‚Ä¢ Having slow performance There are situations and companies in which all of those risks are acceptable to take. That being said, True North helps us understand that all these issues must be carefully considered when we put code into production. Just because these rules have exceptions doesn‚Äôt mean we forget that they exist</p>
  </li>
  <li>
    <p>When talking about structure with skeptics, I try to reframe the discussion. Instead of talking about structure, I talk about learning. Instead of talking about process, I talk about transparency. We don‚Äôt set up systems because structure and process have inherent value. We do it because we want to learn from our successes and our mistakes, and to share those successes and encode the lessons we learn from failures in a transparent way. This learning and sharing is how organizations become more stable and more scalable over time</p>
  </li>
  <li>
    <p>One of the best analogies I‚Äôve heard for startup leadership comes from a friend, On Freud, who‚Äôs been in engineering management at several different startups. On describes the earliest startup as like driving a race car. You‚Äôre close to the ground, and you feel every move you make. You have control, you can turn quickly, you feel like things are moving fast. Of course, you‚Äôre also at risk of crashing at any moment, but you only take yourself down if you do. As you grow, you graduate to a commercial flight. You‚Äôre farther from the ground, and more people‚Äôs lives depend on you, so you need to consider your movements more carefully, but you still feel in control and can turn the plane relatively quickly. Finally, you graduate to a spaceship, where you can‚Äôt make quick moves and the course is set long in advance, but you‚Äôre capable of going very far and taking tons of people along for the ride</p>
  </li>
  <li>
    <p>My advice to leaders is simple: when failures occur, examine all aspects of reality that are contributing to those failures. The patterns you see are opportunities to evolve your structure, either by creating more or different structure or removing it. Think about how often the failure happens and its cost, and use your best judgment about the changes that need to be made. Using failure to guide evolution lets you apply structure at the right level. If a failure is occurring in only one part of the system‚Äîsay, on one team‚Äîyou can try to address the structure on that team without necessarily changing the larger structure. What about examining success? Well, you can learn things from success, but it is often a poor teacher. Ironically, while luck plays a role in both failure and success, we often attribute failure to bad luck and success to our own actions. As Gall‚Äôs law says, a simple system that works can evolve into a complex system, but that doesn‚Äôt mean that applying the lessons from a successful complex system will let you replicate that success in other places</p>
  </li>
  <li>
    <p>Encourage everyone to have some sort of management or mentorship experience before they are eligible to be promoted above the level of the track split. For most companies, the tracks should split when people start to exhibit leadership, whether that leadership involves managing humans or designing software. But even when designing software, you‚Äôre dealing with other humans and human needs. Great senior individual contributors still know how to manage projects and mentor more junior members of their team, so consider making leadership experience (usually via acting as a tech lead) a requirement for promotion to senior individual contributor levels</p>
  </li>
  <li>
    <p>Think of process as risk management. As your teams and systems grow, it‚Äôs almost impossible for any one person to keep the systems in her head. Because we have a bunch of people coordinating work, we evolve processes around that work coordination in order to make risks obvious. One way to think about engineering processes is that they serve as a proxy for how hard or rare it needs to be for something to happen. A complicated process should exist only for activities that you expect to be rare, or activities where the risks are not obvious to people. ‚ÄúComplicated‚Äù in this case does not only mean a long process</p>
  </li>
  <li>
    <p>Sometimes, the complexity is in getting sign-off from a group of people who are very busy, or in meeting a very high standard. This has two important implications. The first is that you should not put a complicated process on any activity where you want people to move quickly and where you believe the risk for change in that activity is low or that the risks themselves are obvious to the whole team. If you want to do code review for all changes, make sure that the process for code review is not so onerous that the team slows down significantly on minor changes, because that will impact your whole group‚Äôs productivity. The second implication is that you need to be on the lookout for places where there is hidden risk, and draw those hidden risks out into the open. There‚Äôs a saying in politics that ‚Äúa good political idea is one that works well in half-baked form,‚Äù and the same goes for engineering processes. The processes should have value even when they are not followed perfectly, and that value should largely lie in the act of socializing change or risk to the team as a whole</p>
  </li>
  <li>
    <p>For the most part, code reviews don‚Äôt catch bugs; tests catch bugs. The exceptions to this rule are that code review can catch missing updates to comments or documentation or missing changes to related features, and code reviewers can sometimes tell when there is inadequate testing of the new or changed code. Code review is largely a socialization exercise, so that multiple team members have seen and are aware of the changed code</p>
  </li>
  <li>
    <p>Engineers can waste absurd amounts of time on questions of style, specifically formatting. This should not be up for debate in code review. Decide on a style, and put that style into a linter that formats the code automatically. Allowing style to be up for discussion in code review often leads to nitpicking and criticism that can feel unproductive at best, and bullying at worst</p>
  </li>
  <li>
    <p>Great managers are masters of working through conflict. Getting good at working through conflict means getting good at taking your</p>
  </li>
  <li>
    <p>Great managers are masters of working through conflict. Getting good at working through conflict means getting good at taking your ego out of the conversation. To find a clear view of a complex situation, you must see past your interpretations and the stories you‚Äôre telling yourself. If you want to be able to tell people hard things and have them hear what you have to say, you must be able to tell them without embellishing the facts with your storyline. People who seek out management roles often have strong views on how things should be. That decisiveness is a good quality, but it can hinder you when you fail to see your interpretation of a situation is just that: an interpretation</p>
  </li>
  <li>For me, becoming a great leader was a series of difficult lessons, mistakes, and challenges. Nothing about it was easy, and I was often frustrated with the interpersonal situations I found myself in. Inevitably, when I told my coach about these situations, she would advise me to think about things from the other person‚Äôs perspective. What are they trying to do? What do they value? What do they want and need? Her advice, always, was to get curious. So I leave you with that thought. Look for the other side of the story. Think about the other perspectives at play. Investigate your emotional reactions, and observe when those reactions make it hard to see clearly what‚Äôs going on around you, what needs to be said. Apply that curiosity to people. Apply it to process. Apply it to technology, and strategy, and business. Ask questions, and be willing to have your notions proven wrong</li>
</ul>

<p>Stay up to date with my latest posts/tweets here: <a href="http://twitter.com/manas_saloi">@manas_saloi</a></p>
:ET